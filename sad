#!/usr/bin/env bash

set -euo pipefail

#-------------------------------------------------------------------------------
# Check environment
#-------------------------------------------------------------------------------
if ((BASH_VERSINFO[0] < 4)); then
  echo "Error: Bash 4.0 or higher is required." >&2
  echo "If you don't have it, I'm guessing you are on MacOS. You can install it with Homebrew:" >&2
  echo "  brew install bash" >&2
  exit 1
fi

if ! command -v gum &> /dev/null; then
  echo "Error: 'gum' is not installed. Please install it to use this script." >&2
  echo "Install it from: https://github.com/charmbracelet/gum" >&2
  exit 1
fi

if ! command -v rg &> /dev/null; then
  echo "Error: 'rg' (ripgrep) is not installed. Please install it to use this script." >&2
  echo "Install it from: https://github.com/BurntSushi/ripgrep" >&2
  exit 1
fi

if ! command -v fzf &> /dev/null; then
  echo "Error: 'fzf' is not installed. Please install it to use this script." >&2
  echo "Install it from: https://github.com/junegunn/fzf" >&2
  exit 1
fi

if ! command -v perl &> /dev/null; then
  echo "Error: 'perl' is not installed. Please install it to use this script." >&2
  echo "Most Unix-like systems have Perl pre-installed." >&2
  echo "How the hell do you not have perl?" >&2
  echo "Anyway, try https://www.perl.org maybe." >&2
  exit 1
fi

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
function usage {
  exit_code="${1:-0}"
  message="${2:-}"

  if [ -n "$message" ]; then
    echo "$message" >&2
  fi

  cat << EOF
Usage: sad [OPTIONS]

Search and replace text in files using PCRE-compatible regular expressions.

Options:
  -h, --help          Show this help message and exit
  -y, --yes           Assume "yes" to all prompts (non-interactive mode)
  -d, --dry-run       Show what would be changed without making any changes
EOF

  exit "$exit_code"
}

function split_input {
  local input="$*"
  local needle
  local replace
  local flags

  # Split on first two unescaped slashes
  IFS=$'\n' read -d '' -r needle replace flags <<< "$(
    perl -pe '
      # Replace first unescaped slash with newline
      s/(?<!\\)\//\n/ or print "\n";
      # Replace second unescaped slash with newline
      s/(?<!\\)\//\n/ or print "\n";
    ' <<< "$input"
  )" || true

  if [[ -z "$needle" ]]; then
    needle="."
    replace=""
  fi

  if [[ -z "$replace" ]]; then
    # shellcheck disable=SC2016
    replace='$0'
  fi

  if [[ -z "$flags" ]]; then
    flags=""
  fi

  echo "$needle"
  echo "$replace"
  echo "$flags"
}

function status_line {
  local interactive="$1"
  shift

  local dry_run="$1"
  shift

  local input="$*"
  local needle
  local replace
  local flags
  local -a parts

  mapfile -t parts < <(split_input "$input")
  needle="${parts[0]}"
  replace="${parts[1]}"
  flags="${parts[2]}"

  echo "Interactive: $interactive | Dry run: $dry_run | Matching: $needle | Replacement: $replace | Flags: $flags"
}

function search {
  local input="$*"
  local needle
  local replace
  local flags
  local -a parts

  mapfile -t parts < <(split_input "$input")
  needle="${parts[0]}"
  replace="${parts[1]}"
  flags="${parts[2]}"

  # Unescape slashes in replace
  replace="${replace//\\\//\/}"

  local -a rg_args=(-nP --line-buffered)
  [[ "$flags" == *i* ]] && rg_args+=("--ignore-case")
  [[ "$flags" == *m* ]] && rg_args+=("--multiline")
  [[ "$flags" == *s* ]] && rg_args+=("--multiline-dotall")

  rg "${rg_args[@]}" "$needle" -r "$replace" . || true
}

function replace {
  local needle="$1"
  local replace="$2"
  local flags="$3"
  local interactive="$4"
  local dry_run="$5"
  local file
  local diff
  local confirmed
  local buffer
  local -a updated=()
  local -a skipped=()

  local -a rg_args=(-lP --line-buffered)
  [[ "$flags" == *i* ]] && rg_args+=("--ignore-case")
  [[ "$flags" == *m* ]] && rg_args+=("--multiline")
  [[ "$flags" == *s* ]] && rg_args+=("--multiline-dotall")

  {
    echo "# Replacement plan"

    # shellcheck disable=SC2016
    printf '**Interactive:** `%s`\n' "$interactive"

    # shellcheck disable=SC2016
    printf '**Replace:** `s/%s/%s/%s`\n' "$needle" "$replace" "$flags"

    if [ "$dry_run" == true ]; then
      echo "_...but not really. We're just playing make believe._"
    fi
  } | gum format

  for file in $(rg "${rg_args[@]}" "$needle" .); do
    buffer=""
    diff="$(perl -pe "s/$needle/$replace/$flags" "$file" | diff -u "$file" - || true)"

    {
      echo "-----"
      echo "## $file"
      echo '```diff'
      echo "$diff"
      echo '```'
    } | gum format

    if [ "$interactive" != false ]; then
      confirmed="$(gum confirm "Apply changes to $file?")"
    else
      confirmed=true
    fi

    if [ "$confirmed" == true ]; then
      if [ "$dry_run" == true ]; then
        buffer+="~ _Let's just pretend that I updated ${file}_"
      else
        perl -pi -e "s/$needle/$replace/$flags" "$file"
      fi

      buffer+="\n✓ _Updated ${file}_"
      updated+=("$file")
    else
      buffer+="\n✗ _Skipped ${file}_"
      skipped+=("$file")
    fi

    echo -e "### Result\n$buffer" | gum format
  done

  {
    echo "-----"
    echo "# Summary"
    echo "File updated: ${#updated[@]}"
    echo "File skipped: ${#skipped[@]}"

    echo "## Updated files"
    if ((${#updated[@]} > 0)); then
      for file in "${updated[@]}"; do
        echo "- \`$file\`"
      done
    else
      echo "_No files were updated._"
    fi

    echo "## Skipped files"
    if ((${#skipped[@]} > 0)); then
      for file in "${skipped[@]}"; do
        echo "- \`$file\`"
      done
    else
      echo "_No files were skipped._"
    fi
  } | gum format
}

#-------------------------------------------------------------------------------
# Arg parsing
#-------------------------------------------------------------------------------
interactive=true
dry_run=false
regex_flags=''

while (($# > 0)); do
  case "$1" in
    -h | --help)
      usage 0
      ;;

    -y | --yes)
      interactive=false
      shift
      ;;

    -d | --dry-run)
      dry_run=true
      shift
      ;;

    *)
      echo "Error: Unknown option '$1'" >&2
      usage 1
      ;;
  esac
done

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------
export -f split_input
export -f status_line
export -f search

# shellcheck disable=SC2016
query="$(
  fzf \
    --print-query \
    --no-select-1 \
    --phony \
    --disabled \
    --header 'Enter PCRE-compatible [needle]/[replacement]/[flags]. Use $n for captured groups. Use backslash to escape literal slashes.' \
    --info-command "status_line $interactive $dry_run '{q}'" \
    --header-border bold \
    --bind 'change:reload:search {q}'
)"

query="$(head -n 1 <<< "$query")"
if [ -z "$query" ]; then
  echo "Nothing to do." >&2
  exit 0
fi

mapfile -t parts < <(split_input "$query")
needle="${parts[0]}"
replace="${parts[1]}"
flags="${parts[2]}"

if [ -z "$needle" ]; then
  echo "Error: No regular expression provided." >&2
  exit 1
fi

if [ -z "$replace" ]; then
  echo "Error: No replacement string provided." >&2
  exit 1
fi

replace "$needle" "$replace" "$flags" "$interactive" "$dry_run"
